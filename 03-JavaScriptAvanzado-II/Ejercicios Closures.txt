Dame 5 ejercicios de Closures similares a este pero no resueltos:

Tu tarea aquí es lograr, mediante un closure, que cacheFunction actúe como una memoria caché para el callback 
que recibe por parámetro (cb); es decir, que "recuerde" el resultado de cada operación que hace, de manera que, 
al realizar una operación por segunda vez, se pueda obtener el resultado de esa "memoria" sin tener que efectuar 
otra vez cálculos que ya se hicieron anteriormente.

- cacheFunction debe retornar una función. Esta función debe aceptar un argumento (arg) e invocar a cb con ese argumento; hecho eso, debe guardar el argumento junto con el resultado de la invocación (tip: usá un objeto donde cada propiedad sea el argumento, y su valor el l resultado de la correspondiente invocación a cb) de manera que, la próxima vez que reciba el mismo argumento, no sea necesario volver a invocar a cb, porque el resultado estará guardado en la "memoria caché".

  Ejemplo:
  function square(n){
    return n * n
  }

  const squareCache = cacheFunction(square)

  squareCache(5)    // invocará a square(5), almacenará el resultado y lo retornará
  squareCache(5)    // no volverá a invocar a square, simplemente buscará en la caché cuál es el resultado de square(5) y lo retornará (tip: si usaste un objeto, podés usar hasOwnProperty) */

function cacheFunction(cb) {}

Crea una función inversa que tome una cadena y devuelva su inversa (es decir, los caracteres en orden inverso). Ahora, crea una función cacheFunction que tome la función inversa y devuelva una función que funcione como una memoria caché para inversa.

Crea una función suma que tome dos números y devuelva su suma. Ahora, crea una función cacheFunction que tome la función suma y devuelva una función que funcione como una memoria caché para suma.

Crea una función esPrimo que tome un número y devuelva un booleano indicando si es primo o no. Ahora, crea una función cacheFunction que tome la función esPrimo y devuelva una función que funcione como una memoria caché para esPrimo.